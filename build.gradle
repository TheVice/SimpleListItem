/*
 * This build file was auto generated by running the Gradle 'init' task
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle user guide
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

//sourceCompability = 1.6 // sets Java version compilation compatibility to 1.6

jar {
  manifest {
    attributes 'Main-Class': 'Main' // adds Main-Class header to JAR file's manifest
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.10'
}

task printVersion {
	doLast {
		println "Version: $version"
	}
}

ext.versionFile = file('version.properties') // identifies project's version

task loadVersion {
	project.version = readVersion()
}

ProjectVersion readVersion() {
	logger.quiet 'Reading the version file.'

	if(!versionFile.exists()) {
		throw new GradleException("Required version file does not exists: $versionFile.canonicalPath")
	}

	Properties versionProps = new Properties()

	versionFile.withInputStream {
		stream->versionProps.load(stream)
	}

	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger())
}

task createDistribution(type: Zip, dependsOn: build) {
	from jar.outputs.files

	from(sourceSets*.allSource) {
		into 'src'
	}

	from(rootDir) {
		include versionFile.name
	}
}

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier.") {
	String taskName -> if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
		task(taskName) << {
			String classifier = (taskName - 'increment' - 'Version').toLowerCase()
			String currentVersion = version.toString()

			switch(classifier) {
				case 'major': ++version.major
					break
				case 'minor': ++version.minor
					break
				default: throw new GradleException("Invalid version type '$classifier'. Allowed types: ['Major', 'Minor']")
			}

			String newVersion = version.toString()
			logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

			ant.propertyfile(file: versionFile) {
				entry(key: classifier, type: 'int', operation: '+', value: 1)
			}
		}
	}
}
